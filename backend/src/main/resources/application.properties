# App identity
spring.application.name=swequalityinspection

# PostgreSQL (use Docker service name, not localhost)
spring.datasource.url=jdbc:postgresql://postgres:5432/qualityinspection
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# DB schema initialization
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql

# JPA & Hibernate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Error visibility
server.error.include-stacktrace=never

# KEYCLOAK SETUP (use service name "keycloak", not localhost)
spring.security.oauth2.client.registration.oauth2-realm-client.client-id=oauth2-realm-client
spring.security.oauth2.client.registration.oauth2-realm-client.client-secret=JEULnhegwkCnKXOBUEyCQoMpc29ot6hU
spring.security.oauth2.client.registration.oauth2-realm-client.scope=openid, profile, roles
spring.security.oauth2.client.registration.oauth2-realm-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.oauth2-realm-client.redirect-uri=http://localhost:8080/login/oauth2/code/oauth2-realm-client

# Talk to Keycloak container by its Docker service name
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/oauth2-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/oauth2-realm/protocol/openid-connect/certs
spring.security.oauth2.client.provider.oauth2-realm-client.issuer-uri=http://keycloak:8080/realms/oauth2-realm
